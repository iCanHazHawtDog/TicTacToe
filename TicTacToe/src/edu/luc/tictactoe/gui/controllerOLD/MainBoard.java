package edu.luc.tictactoe.gui.controllerOLD;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainBoard.java
 *
 * Created on Oct 8, 2011, 8:19:13 PM
 */


import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;

import org.jdesktop.application.ResourceMap;

import edu.luc.tictactoe.application.MainApplication;
import edu.luc.tictactoe.businesslogic.IPlayer;
import edu.luc.tictactoe.businesslogic.implementation.Person;
import edu.luc.tictactoe.businesslogic.implementation.SelectionResult;
import edu.luc.tictactoe.businesslogic.implementation.TicTacToePlay;
import edu.luc.tictactoe.networking.INetworking;
import edu.luc.tictactoe.networking.PositionInterpretor;

/**
 * @author Paul
 *
 *This is the MainBoard class, all of the UI actions are handled here.
 *
 *This class houses and deals with all the buttons that are in the UI
 * 
 * 
 */
public class MainBoard extends javax.swing.JFrame {
	/**An array of all the buttons that can be selected in the board*/
	public JButton[] buttonArray;
	/**The networking interface*/
	private static INetworking network;
	/**A boolean that is set if we are dealing with a network based game*/
	private ResultWindow resultsWindow;
	private boolean isNetwork=false;
	//A boolean set to tell the UI to wait for a move-- Depreciated 10/10/2011
	//public boolean waitForMove=false;
	//A test ticTacToePlay for testing-- Depreciated 10/10/2011
	//private TicTacToePlay ticTacToePlay;
	//An instance of the PositionInterpretor
	private PositionInterpretor posMaker;
	/***A boolean to set if this machine/instance of the game is the client machine*/
    public boolean isClient;
    //A boolean that is set based on who's turn it is-- Depreciated 10/10/2011
    //public boolean turn=false;
    //Sets wethter the game can be resetable
    public boolean resetable=true;
    /**An array that represents all of the buttons in the user interface. Used to make sure that the button does not
     * gets selected even if it is selected already- since the actions handled of are type mouseActionListener.
     * Note that the array coordinates are as follows- the top left is position 0, top middle is 1, etc..  */
    public boolean[] selectable={true,true,true,true,true,true,true,true,true};
    /***An array that represents all of the buttons in the user interface- used for the networking.
     * 
     * If a position is set over the networking- then this gets set so the user cannot select the position
     * and attempt to send a new position over the network- prevents cheating.
     * 
     * Used to make sure that the button does not
     * gets selected even if it is selected already- since the actions handled of are type mouseActionListener.
     * Note that the array coordinates are as follows- the top left is position 0, top middle is 1, etc..  */
    public boolean[] networkSelectable={true,true,true,true,true,true,true,true,true};
    /**A boolean that we use to make the main menu and reset button not clickable when a draw or win/loss is shown*/
    public boolean disableBtns=false;
  
    
   
    
    /*** Creates new form MainBoard */
 	public MainBoard() {	
        initComponents();
        setUpBtnArray();  
    }
	
	
    
	/***
	 * 
	 * @param network
	 * @param isClient
	 * 
	 * Sets the networking for this class- if the game is going to be network based, then we use this to
	 * set the UI to be ready for network moves and make network moves.
	 * 
	 */
    public void setNetworking(INetworking network, boolean isClient){
    	isNetwork=true;
    	this.network=network;
    	this.isClient=isClient;
    	resetBtn.setVisible(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     *
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

    	jPanel1 = new javax.swing.JPanel();
        mainMenuBtn = new javax.swing.JButton();
        resetBtn = new javax.swing.JButton();
        pauseBtn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        grid0Btn = new javax.swing.JButton();
        grid0Btn.setFocusable(false);
        grid1Btn = new javax.swing.JButton();
        grid1Btn.setFocusable(false);
        grid2Btn = new javax.swing.JButton();
        grid2Btn.setFocusable(false);
        grid3Btn = new javax.swing.JButton();
        grid3Btn.setFocusable(false);
        grid4Btn = new javax.swing.JButton();
        grid4Btn.setFocusable(false);
        grid5Btn = new javax.swing.JButton();
        grid5Btn.setFocusable(false);
        grid6Btn = new javax.swing.JButton();
        grid6Btn.setFocusable(false);
        grid7Btn = new javax.swing.JButton();
        grid7Btn.setFocusable(false);
        grid8Btn = new javax.swing.JButton();
        grid8Btn.setFocusable(false);
        player1Label = new javax.swing.JLabel();
        player2Label = new javax.swing.JLabel();
        player1WinsLabel = new javax.swing.JLabel();
        player1WinCount = new javax.swing.JLabel();
        player2WinsLabel = new javax.swing.JLabel();
        player2WinsCount = new javax.swing.JLabel();
        currentTurnLabel = new javax.swing.JLabel();
        currentTurnPlayerLabel = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        resumeGameBtn = new javax.swing.JButton();
        mainMenuPauseBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("Form"); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setName("jPanel1"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(edu.luc.tictactoe.gui.controllerOLD.TicTacToeUIApp.class).getContext().getResourceMap(MainBoard.class);
        mainMenuBtn.setText(resourceMap.getString("mainMenuBtn.text")); // NOI18N
        mainMenuBtn.setName("mainMenuBtn"); // NOI18N
        mainMenuBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                mainMenuBtnMouseReleased(evt);
            }
        });

        resetBtn.setText(resourceMap.getString("resetBtn.text")); // NOI18N
        resetBtn.setName("resetBtn"); // NOI18N
        resetBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                resetBtnMouseReleased(evt);
            }
        });

        pauseBtn.setText(resourceMap.getString("pauseBtn.text")); // NOI18N
        pauseBtn.setName("pauseBtn"); // NOI18N
        pauseBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                pauseBtnMouseReleased(evt);
            }
        });

        jPanel2.setName("jPanel2"); // NOI18N
        jPanel2.setLayout(new java.awt.GridLayout(3, 3));

        grid0Btn.setIcon(resourceMap.getIcon("grid0Btn.icon")); // NOI18N
        grid0Btn.setText(resourceMap.getString("grid0Btn.text")); // NOI18N
        grid0Btn.setName("grid0Btn"); // NOI18N
        grid0Btn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                grid0BtnMouseReleased(evt);
            }
        });
        jPanel2.add(grid0Btn);

        grid1Btn.setText(resourceMap.getString("grid1Btn.text")); // NOI18N
        grid1Btn.setName("grid1Btn"); // NOI18N
        grid1Btn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                grid1BtnMouseReleased(evt);
            }
        });
        jPanel2.add(grid1Btn);

        grid2Btn.setText(resourceMap.getString("grid2Btn.text")); // NOI18N
        grid2Btn.setName("grid2Btn"); // NOI18N
        grid2Btn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                grid2BtnMouseReleased(evt);
            }
        });
        jPanel2.add(grid2Btn);

        grid3Btn.setText(resourceMap.getString("grid3Btn.text")); // NOI18N
        grid3Btn.setName("grid3Btn"); // NOI18N
        grid3Btn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                grid3BtnMouseReleased(evt);
            }
        });
        jPanel2.add(grid3Btn);

        grid4Btn.setText(resourceMap.getString("grid4Btn.text")); // NOI18N
        grid4Btn.setName("grid4Btn"); // NOI18N
        grid4Btn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                grid4BtnMouseReleased(evt);
            }
        });
        jPanel2.add(grid4Btn);

        grid5Btn.setText(resourceMap.getString("grid5Btn.text")); // NOI18N
        grid5Btn.setName("grid5Btn"); // NOI18N
        grid5Btn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                grid5BtnMouseReleased(evt);
            }
        });
        jPanel2.add(grid5Btn);

        grid6Btn.setText(resourceMap.getString("grid6Btn.text")); // NOI18N
        grid6Btn.setName("grid6Btn"); // NOI18N
        grid6Btn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                grid6BtnMouseReleased(evt);
            }
        });
        jPanel2.add(grid6Btn);

        grid7Btn.setText(resourceMap.getString("grid7Btn.text")); // NOI18N
        grid7Btn.setName("grid7Btn"); // NOI18N
        grid7Btn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                grid7BtnMouseReleased(evt);
            }
        });
        jPanel2.add(grid7Btn);

        grid8Btn.setText(resourceMap.getString("grid8Btn.text")); // NOI18N
        grid8Btn.setName("grid8Btn"); // NOI18N
        grid8Btn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                grid8BtnMouseReleased(evt);
            }
        });
        jPanel2.add(grid8Btn);

        player1Label.setText(resourceMap.getString("player1Label.text")); // NOI18N
        player1Label.setName("player1Label"); // NOI18N

        player2Label.setText(resourceMap.getString("player2Label.text")); // NOI18N
        player2Label.setName("player2Label"); // NOI18N

        player1WinsLabel.setText(resourceMap.getString("player1WinsLabel.text")); // NOI18N
        player1WinsLabel.setName("player1WinsLabel"); // NOI18N

        player1WinCount.setText(resourceMap.getString("player1WinCount.text")); // NOI18N
        player1WinCount.setName("player1WinCount"); // NOI18N

        player2WinsLabel.setText(resourceMap.getString("player2WinsLabel.text")); // NOI18N
        player2WinsLabel.setName("player2WinsLabel"); // NOI18N

        player2WinsCount.setText(resourceMap.getString("player2WinsCount.text")); // NOI18N
        player2WinsCount.setName("player2WinsCount"); // NOI18N

        currentTurnLabel.setText(resourceMap.getString("currentTurnLabel.text")); // NOI18N
        currentTurnLabel.setName("currentTurnLabel"); // NOI18N

        currentTurnPlayerLabel.setText(resourceMap.getString("currentTurnPlayerLabel.text")); // NOI18N
        currentTurnPlayerLabel.setName("currentTurnPlayerLabel"); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(player1Label)
                            .addComponent(player2Label)
                            .addComponent(player1WinsLabel)
                            .addComponent(player2WinsLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(player1WinCount)
                            .addComponent(player2WinsCount))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 302, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(currentTurnLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(currentTurnPlayerLabel)
                        .addGap(397, 397, 397)
                        .addComponent(pauseBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resetBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mainMenuBtn)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mainMenuBtn)
                    .addComponent(resetBtn)
                    .addComponent(pauseBtn))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(player1Label)
                .addGap(42, 42, 42)
                .addComponent(player2Label)
                .addGap(117, 117, 117)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(player1WinCount)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(player2WinsCount))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(player1WinsLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(player2WinsLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 163, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(currentTurnLabel)
                    .addComponent(currentTurnPlayerLabel))
                .addGap(31, 31, 31))
        );

        jPanel3.setName("jPanel3"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        resumeGameBtn.setText(resourceMap.getString("resumeGameBtn.text")); // NOI18N
        resumeGameBtn.setName("resumeGameBtn"); // NOI18N
        resumeGameBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                resumeGameBtnMouseReleased(evt);
            }
        });

        mainMenuPauseBtn.setText(resourceMap.getString("mainMenuPauseBtn.text")); // NOI18N
        mainMenuPauseBtn.setName("mainMenuPauseBtn"); // NOI18N
        mainMenuPauseBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                mainMenuPauseBtnMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(331, 331, 331)
                        .addComponent(jLabel1))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(344, 344, 344)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(resumeGameBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(mainMenuPauseBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(349, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(165, 165, 165)
                .addComponent(jLabel1)
                .addGap(39, 39, 39)
                .addComponent(resumeGameBtn)
                .addGap(18, 18, 18)
                .addComponent(mainMenuPauseBtn)
                .addContainerGap(175, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
       
		
        
        jPanel3.setVisible(false);
        player1Label.setText(MainApplication.ticTacToePlay.getPlayerOne().getName() + " is: X");
        
        getPlayer2Label().setText(MainApplication.ticTacToePlay.getPlayerTwo().getName() + " is: O");
        currentTurnPlayerLabel.setVisible(false);
        currentTurnLabel.setText("Player turn: " + MainApplication.ticTacToePlay.whoseTurn().getName());
        player1WinsLabel.setText(null);
        player2WinsLabel.setText(null);
        player2WinsCount.setText(null);
        player1WinCount.setText(null);
        pauseBtn.setVisible(false);
        
        pack();
    }

    /***
     * If the user selects the Main Menu button from the board, the code is
     * handled here. 
     * 
     * If the game is networked based, it terminates the game, then it destroys the connection.
     * 
     * The window is then disposed of and the user is taken back to the main menu
     *  
     *  @param evt
     */
    public void mainMenuBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mainMenuBtnMouseReleased
    	if(!disableBtns){
    		if(isNetwork){
    			network.sendGameTerminate();
    			network.destroyConnection();
    		}
    		
    		if(!isClient){
    			MainApplication.ticTacToePlay.registerPlayers();
    		}
    		this.dispose();
            TicTacToeUIApp.getApplication().getMainFrame().setVisible(true);
    	}
    	
        
    }//GEN-LAST:event_mainMenuBtnMouseReleased

    
    /***
     * If the user selects the first position, the markPosition method is run for 
     * the first position.
     * 
     * 
     * @param evt
     */
    private void grid0BtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_grid0BtnMouseReleased
    	markPosition(0, grid0Btn, isNetwork);

    }
    
    /***
     * If the user selects the second position, the markPosition method is run for 
     * the second position.
     * 
     * 
     * @param evt
     */
    private void grid1BtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_grid1BtnMouseReleased    	 
    	markPosition(1,grid1Btn, isNetwork);

    }//GEN-LAST:event_grid1BtnMouseReleased
    
    /***
     * If the user selects the third position, the markPosition method is run for 
     * the third position.
     * 
     * 
     * @param evt
     */
    private void grid2BtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_grid2BtnMouseReleased
    	markPosition(2,grid2Btn, isNetwork);
   
    }//GEN-LAST:event_grid2BtnMouseReleased
    
    /***
     * If the user selects the fourth position, the markPosition method is run for 
     * the fourth position.
     * 
     * 
     * @param evt
     */
    private void grid3BtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_grid3BtnMouseReleased
    	markPosition(3,grid3Btn, isNetwork);
         
    }//GEN-LAST:event_grid3BtnMouseReleased
    
    /***
     * If the user selects the fifth position, the markPosition method is run for 
     * the fifth position.
     * 
     * 
     * @param evt
     */
    private void grid4BtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_grid4BtnMouseReleased
    	markPosition(4,grid4Btn, isNetwork);

    }//GEN-LAST:event_grid4BtnMouseReleased
    
    /***
     * If the user selects the sixth position, the markPosition method is run for 
     * the sixth position.
     * 
     * 
     * @param evt
     */
    private void grid5BtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_grid5BtnMouseReleased
    	markPosition(5,grid5Btn, isNetwork);

    }//GEN-LAST:event_grid5BtnMouseReleased
    
    /***
     * If the user selects the seventh position, the markPosition method is run for 
     * the seventh position.
     * 
     * 
     * @param evt
     */
    private void grid6BtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_grid6BtnMouseReleased
    	markPosition(6,grid6Btn, isNetwork);

         
    }//GEN-LAST:event_grid6BtnMouseReleased
    
    /***
     * If the user selects the eighth position, the markPosition method is run for 
     * the eighth position.
     * 
     * 
     * @param evt
     */
    private void grid7BtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_grid7BtnMouseReleased
    	markPosition(7,grid7Btn, isNetwork);

    }//GEN-LAST:event_grid7BtnMouseReleased
    
    /***
     * If the user selects the ninth position, the markPosition method is run for 
     * the ninth position.
     * 
     * 
     * @param evt
     */
    private void grid8BtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_grid8BtnMouseReleased
    	markPosition(8,grid8Btn, isNetwork);
   
    }//GEN-LAST:event_grid8BtnMouseReleased
    
    /***
     * If the user selects the pause button, first we hide all the panels that are visible
     * and put up the paused screen panel. We then enable the Pause Game Button that allows the
     * user to resume the game.
     * 
     * If it is a network based game, we send the the fact that the game has been paused over the network.
     * 
     * @param evt
     */
    private void pauseBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pauseBtnMouseReleased
    	
    	jPanel1.setVisible(false);
    	jPanel2.setVisible(false);
    	jPanel3.setVisible(true);
    	resumeGameBtn.repaint();
    	resumeGameBtn.setEnabled(true);
    	jPanel3.repaint();
    	
    	if(isNetwork){
    		network.pauseGame();
    	}
    	
    // TODO add your handling code here:
    }//GEN-LAST:event_pauseBtnMouseReleased
    
    /***
     * If the user selects the "Reset Button" in the main board, it resets the game. This does not work if the
     * game is network based because the button itself is disabled.
     * 
     * @param evt
     */
    private void resetBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resetBtnMouseReleased
    	if(!disableBtns){
	        //Just re-setting the buttons here..
	    	if(resetable){
		    	MainApplication.ticTacToePlay.resetGame();
		        resetButtons();
	    	}
    	}
       
        
    }//GEN-LAST:event_resetBtnMouseReleased
                                  
    /***
     * If the user selects the "Resume Game" button, the gameplay resumes. First we show the two main gameplay panels
     * and hide the pause game panel.
     * 
     * If this is a network based game, we go ahead and send the resume game message. The rest is taken care of by the
     * networking class(es).
     * 
     * @param evt
     */
	private void resumeGameBtnMouseReleased(java.awt.event.MouseEvent evt) {

		jPanel1.setVisible(true);
		jPanel2.setVisible(true);
		jPanel3.setVisible(false);
		
		if(isNetwork){
			network.resumeGame();
		}

	}
	
	/***
	 * If the game is paused and the user wishes to go back to the main menu, this is the button that is selected
	 * If the "Main Menu" button is selected and the game is the network then then we terminate the session.
	 * We also destroy the connection.
	 * 
	 * If it is not a network, then we dispose of this class, and bring the main application window to the 
	 * front of the UI.
	 * 
	 * @param evt
	 */
	private void mainMenuPauseBtnMouseReleased(java.awt.event.MouseEvent evt) {
		if(!disableBtns){
			if(isNetwork){
				network.sendGameTerminate();
				network.destroyConnection();
			}
			this.dispose();
		    TicTacToeUIApp.getApplication().getMainFrame().setVisible(true);
		    
		}
	// TODO add your handling code here:
	}
	
	/***
	 * We use this to initialize the buttonArray since the buttons are not initialized until
	 * after the constructor is run.
	 * 
	 */
	private void setUpBtnArray(){
    //Method that just sets up the array of the buttons.
    JButton[] buttonArray={grid0Btn, grid1Btn,grid2Btn,grid3Btn,grid4Btn,grid5Btn,
        grid6Btn,grid7Btn,grid8Btn};
    
    this.buttonArray=buttonArray;
	}
	
	/***
	 * Used to mark a position on the board and possibly send it over the network. 
	 * 
	 * Takes in the position, the instance of the button, and if it is a position that is being selected by the network
	 * The networkSet parameter is really only used form within the networkUI bridge, otherwise we deal with network selections
	 * as a client machine, or as a regular machine(also considered the host if isNetwork is set to true).
	 * 
	 * First, we check the selectable and networkSelectable arrays to ensure that the position can be selected. If this is possible, then
	 * we check to see if this is a client machine- note that the isClient var can only be enabled if we are a network connection and if
	 * the user selects Join Game in the IfNTB Form. If isClient is true, then we set the icon to X, and we send the position to the host
	 * machine. Note that the client machine is not keeping track of the state of the game. 
	 * 
	 * If isClient is false, we go ahead and perform the actions taht 
	 * 
	 * @param pos
	 * @param btn
	 * @param networkSet
	 */
	public void markPosition(int pos, JButton btn, boolean networkSet){
		resultsWindow= new ResultWindow(this, isNetwork, network);
		resultsWindow.setLocationRelativeTo(null);
	
		if(selectable[pos] && networkSelectable[pos]){
			selectable[pos]=false;
			posMaker= new PositionInterpretor(pos);
			
			if(isClient){
				org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(edu.luc.tictactoe.gui.controllerOLD.TicTacToeUIApp.class).getContext().getResourceMap(MainBoard.class);
				btn.setIcon(resourceMap.getIcon("xIcon.icon"));
				
				network.setPosition(pos);
				
			}else{
				btn.setIcon(MainApplication.ticTacToePlay.whoseTurn().getIcon());
				IPlayer previousPlayer= new Person();
				previousPlayer=MainApplication.ticTacToePlay.whoseTurn();
					
				SelectionResult result = MainApplication.ticTacToePlay.selectPosition(posMaker.x, posMaker.y);
				
				btn.setSelected(true);
				btn.setEnabled(false);
				    
				if(result == SelectionResult.Continue){
					System.out.println("CONTINUE");
				    	if(isNetwork){
				    		if(networkSet){
				    			network.setPosition(pos);
				    		}
				    	}
				    	//Let play continue.. actually do nothing..
				    }if(result == SelectionResult.Draw){
				    	System.out.println("DRAW");
				    	resetable=false;
				    	if(isNetwork){
				    		if(networkSet){
				    			network.setPosition(pos);
				    		}
				    		network.sendDraw();
					    }else{
					    	
					    	resultsWindow.setDraw(false);
					    	TicTacToeUIApp.getApplication().show(resultsWindow);
						    resultsWindow.setResizable(false);
						    resultsWindow.setSize(450,280);
					    }
				    	setNoneClickable();
				    	
				    	resetBtn.setEnabled(false);
				    	mainMenuBtn.setEnabled(false);
				    	disableBtns=true;
				    	//TODO- Display a DRAW form && count number of total draws
				    	MainApplication.ticTacToePlay.resetGame();
				    	
				    }if(result == SelectionResult.Win){
				    	System.out.println("WIN");
				    	resetable=false;
				    	if(isNetwork){
				    		if(networkSet){
				    			network.setPosition(pos);
				    		}
				    		if(previousPlayer.equals(MainApplication.ticTacToePlay.getPlayerOne())){

				    			network.sendHostWin();
				    			network.checkTurn();
				    		}else{
				    		
				    			network.sendClientWin();
				    			network.checkTurn();
				    		}
					    }else{
					    	
					    	resultsWindow.setWin(previousPlayer.getName(), false);
					    	TicTacToeUIApp.getApplication().show(resultsWindow);
						    //resultsWindow.setResizable(true);
						    resultsWindow.setSize(450,280);
					    	
					    }
				    	resetBtn.setEnabled(false);
				    	mainMenuBtn.setEnabled(false);
				    	disableBtns=true;
				    	player1WinCount.setText(MainApplication.ticTacToePlay.getPlayerOne().getName()+" Wins: " + MainApplication.ticTacToePlay.getPlayerOne().getWins());
				    	player2WinsCount.setText(MainApplication.ticTacToePlay.getPlayerTwo().getName()+" Wins: " + MainApplication.ticTacToePlay.getPlayerTwo().getWins());
				    	if(isNetwork){
				    		MainApplication.ticTacToePlay.resetGame();
				    	}
				    	setNoneClickable();
				    }
				    
				
				
			}
			if(isClient){
				currentTurnLabel.setText("Current turn: "+ MainApplication.ticTacToePlay.getPlayerTwo().getName());
			}else{
				currentTurnLabel.setText("Player turn: " + MainApplication.ticTacToePlay.whoseTurn().getName());
			}
			    	
  	
		}    	
	}
	
	public void markOpposition(int position, JButton btn){
		org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(edu.luc.tictactoe.gui.controllerOLD.TicTacToeUIApp.class).getContext().getResourceMap(MainBoard.class);
		btn.setIcon(resourceMap.getIcon("oIcon.icon"));
		currentTurnLabel.setText("It is: "+ MainApplication.ticTacToePlay.getPlayerOne().getName()+"'s turn!");
		
	}
	
	public void winForm(boolean clientWin){
		if(isClient){
			MainApplication.ticTacToePlay.getPlayerOne().incrementNumberOfPlays();
			if(clientWin){
				MainApplication.ticTacToePlay.getPlayerOne().incrementNumberOfWins();
				
			}else{
				MainApplication.ticTacToePlay.getPlayerTwo().incrementNumberOfWins();
			}
			
			System.out.println("Number of plays: "+MainApplication.ticTacToePlay.getPlayerOne().getNumberOfPlays());
			
			
			
		}
		
		
		resultsWindow= new ResultWindow(this, isNetwork, network);
		resultsWindow.setLocationRelativeTo(null);
		
		resultsWindow.setNetPop(clientWin, isClient, false);
		
		TicTacToeUIApp.getApplication().show(resultsWindow);
	    resultsWindow.setResizable(false);
	    resultsWindow.setSize(450,280);
	    
	    setNoneClickable();
		
		
	}
	
	public void drawForm(boolean cleintWin){
		if(isClient){
			MainApplication.ticTacToePlay.getPlayerOne().incrementNumberOfPlays();
		}

		//MainApplication.ticTacToePlay.setNumberOfPlays(MainApplication.ticTacToePlay.getPlayerOne().getNumberOfPlays()+1);
		resultsWindow= new ResultWindow(this, isNetwork, network);
		
		resultsWindow.setLocationRelativeTo(null);
		
		resultsWindow.setNetPop(cleintWin, isClient, true);
		
	
		TicTacToeUIApp.getApplication().show(resultsWindow);
	    resultsWindow.setResizable(false);
	    resultsWindow.setSize(450,280);
	    
	    setNoneClickable();
		
		
	}
	
	
	public void resetButtons(){
		resetable=true;
		 int len=buttonArray.length;
	        for(int i=0; i<len; i++){
	        	buttonArray[i].setEnabled(true);
	            buttonArray[i].setSelected(false);
	            buttonArray[i].setIcon(null);
	            selectable[i]=true;
	            networkSelectable[i]=true;
	        }
		
	}
	
	public void setNoneClickable(){
		int len= selectable.length;
		for(int i=0; i<len; i++){
			selectable[i]=false;
		}
	}
	
	public void setAllClickable(){
		int len= selectable.length;
		for(int i=0; i<len; i++){
			selectable[i]=true;
		}
	}
	
	public void allEnabled(){
		for(int i=0; i<buttonArray.length; i++){
			buttonArray[i].setEnabled(true);
		}
	}

	public static javax.swing.JLabel getPlayer2Label() {
		return player2Label;
	}
	
	public static void setPlayer2Label(javax.swing.JLabel player2Label) {
		MainBoard.player2Label = player2Label;
	}
	
	
	public void resume(){
		if(isNetwork){
			resultsWindow.dispose();
			disableBtns=false;
	    	mainMenuBtn.setEnabled(true);
			setAllClickable();
			
		}else{
			jPanel1.setVisible(true);
			jPanel2.setVisible(true);
			jPanel3.setVisible(false);
		}
	}
	
	public void terminateGame(){
		try{
			resultsWindow.dispose();
			
		}catch(NullPointerException e){
			//We don't care that there has been an exception, if there is no results window, then we do
			//anything differently. We continue on with our game termination.
		}
		if(!isClient){
			MainApplication.ticTacToePlay.registerPlayers();
		}
		this.dispose();
	    TicTacToeUIApp.getApplication().getMainFrame().setVisible(true);
		
		
	}
	
	
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
         
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainBoard().setVisible(true);
            }
        });
    }
    
	// Variables declaration - do not modify
    public static javax.swing.JLabel currentTurnLabel;
    public static javax.swing.JLabel currentTurnPlayerLabel;
    public static JButton grid0Btn;
    public static javax.swing.JButton grid1Btn;
    public static javax.swing.JButton grid2Btn;
    public static javax.swing.JButton grid3Btn;
    public static javax.swing.JButton grid4Btn;
    public static javax.swing.JButton grid5Btn;
    public static javax.swing.JButton grid6Btn;
    public static javax.swing.JButton grid7Btn;
    public static javax.swing.JButton grid8Btn;
    private javax.swing.JLabel jLabel1;
    public static javax.swing.JPanel jPanel1;
    public static javax.swing.JPanel jPanel2;
    public static javax.swing.JPanel jPanel3;
    public static javax.swing.JButton mainMenuBtn;
    public static javax.swing.JButton mainMenuPauseBtn;
    private javax.swing.JButton pauseBtn;
    private javax.swing.JLabel player1Label;
    private javax.swing.JLabel player1WinCount;
    private javax.swing.JLabel player1WinsLabel;
    public static javax.swing.JLabel player2Label;
    private javax.swing.JLabel player2WinsCount;
    private javax.swing.JLabel player2WinsLabel;
    public static javax.swing.JButton resetBtn;
    public static javax.swing.JButton resumeGameBtn;
    // End of variables declaration
}

