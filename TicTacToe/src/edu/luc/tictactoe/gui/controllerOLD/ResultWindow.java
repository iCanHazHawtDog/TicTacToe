package edu.luc.tictactoe.gui.controllerOLD;

import edu.luc.tictactoe.application.MainApplication;
import edu.luc.tictactoe.networking.INetworking;

/*
 * ResultWindow.java
 * Created on Oct 19, 2011, 3:25:33 PM
 */


/**
 *
 * @author Paul Stasiuk
 * 
 * 
 * The ResultsWindow class displays the form that contains the results of the game(Win, Draw, or loss). This window inclues inforamtin about
 * games that have been currently played and how many wins each player has.
 * 
 */
public class ResultWindow extends javax.swing.JFrame {
	private MainBoard mainBoard;
	private boolean isNetwork=false;
	private INetworking network;
	
	
    /** Creates new form ResultWindow 
     * 
     * 
     *@param MainBoard, isNetwork, network 
     */
    public ResultWindow(MainBoard mainBoard,boolean isNetwork, INetworking network) {
    	this.mainBoard= mainBoard;
    	this.isNetwork=isNetwork;
    	this.network=network;
        initComponents();
        
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

    	mainPanel = new javax.swing.JPanel();
        player1Wins = new javax.swing.JLabel();
        player2Wins = new javax.swing.JLabel();
        numGamesPlayed = new javax.swing.JLabel();
        playerWon = new javax.swing.JLabel();
        replayBtn = new javax.swing.JButton();
        endGameBtn = new javax.swing.JButton();
        networkInfo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("Form"); // NOI18N

        mainPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        mainPanel.setName("mainPanel"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(edu.luc.tictactoe.gui.controllerOLD.TicTacToeUIApp.class).getContext().getResourceMap(ResultWindow.class);
        player1Wins.setText(resourceMap.getString("player1Wins.text")); // NOI18N
        player1Wins.setName("player1Wins"); // NOI18N

        player2Wins.setText(resourceMap.getString("player2Wins.text")); // NOI18N
        player2Wins.setName("player2Wins"); // NOI18N

        numGamesPlayed.setText(resourceMap.getString("numGamesPlayed.text")); // NOI18N
        numGamesPlayed.setName("numGamesPlayed"); // NOI18N

        playerWon.setText(resourceMap.getString("playerWon.text")); // NOI18N
        playerWon.setName("playerWon"); // NOI18N

        replayBtn.setText(resourceMap.getString("replayBtn.text")); // NOI18N
        replayBtn.setName("replayBtn"); // NOI18N
        replayBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                replayBtnMouseReleased(evt);
            }
        });

        endGameBtn.setText(resourceMap.getString("endGameBtn.text")); // NOI18N
        endGameBtn.setName("endGameBtn"); // NOI18N
        endGameBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                endGameBtnMouseReleased(evt);
            }
        });

        networkInfo.setText(resourceMap.getString("networkInfo.text")); // NOI18N
        networkInfo.setName("networkInfo"); // NOI18N

        org.jdesktop.layout.GroupLayout mainPanelLayout = new org.jdesktop.layout.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainPanelLayout.createSequentialGroup()
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(mainPanelLayout.createSequentialGroup()
                        .add(178, 178, 178)
                        .add(playerWon))
                    .add(mainPanelLayout.createSequentialGroup()
                        .add(117, 117, 117)
                        .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(networkInfo)
                            .add(mainPanelLayout.createSequentialGroup()
                                .add(replayBtn)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(endGameBtn))))
                    .add(mainPanelLayout.createSequentialGroup()
                        .add(105, 105, 105)
                        .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(player1Wins)
                            .add(numGamesPlayed)
                            .add(player2Wins))))
                .addContainerGap(141, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(playerWon)
                .add(30, 30, 30)
                .add(player1Wins, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(11, 11, 11)
                .add(player2Wins)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(numGamesPlayed)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 30, Short.MAX_VALUE)
                .add(networkInfo)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(endGameBtn)
                    .add(replayBtn))
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(mainPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(mainPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    /***
     * If the mouse is released on the rematch button, this method is run.
     * 
     * If it is a network based game, we go ahead and run the resumeGame method on the network
     * side which will resume the game over the network.
     * 
     * @param evt
     */
    private void replayBtnMouseReleased(java.awt.event.MouseEvent evt) {
    	if(isNetwork){
    		network.resumeGame();
    		if(!mainBoard.isClient){
    			network.checkTurn();
    		}
    	}
    	mainBoard.resetBtn.setEnabled(true);
    	mainBoard.mainMenuBtn.setEnabled(true);
    	mainBoard.disableBtns=false;
    	mainBoard.resetButtons();
    	this.dispose();
    	
    }
    
    
    /***
     * If the user clicks the endGame Button, we take the user back to the main menu..
     * 
     * @param evt
     */
    private void endGameBtnMouseReleased(java.awt.event.MouseEvent evt) {
    	if(isNetwork){
    		network.sendGameTerminate();
    		network.destroyConnection();
    	}else{
    		
    		MainApplication.ticTacToePlay.registerPlayers();
    		
    	}
    	
    	mainBoard.dispose();
    	this.dispose();
    	TicTacToeUIApp.getApplication().getMainFrame().setVisible(true);
    	
    	
    }
    
    
    /**
     * setWin displays a winnner, games played and the total number of games. 
     * 
     * 
     * @param winner
     * @param isNetwork
     */
    public void setWin(String winner, boolean isNetwork){
    	if(!isNetwork){
    		networkInfo.setVisible(false);
    	}
    	
    	playerWon.setText("The winnder is: "+winner+" !");
    	player1Wins.setText(MainApplication.ticTacToePlay.getPlayerOne().getName()+" has won: "+ MainApplication.ticTacToePlay.getPlayerOne().getWins()+ " games!");
    	player2Wins.setText(MainApplication.ticTacToePlay.getPlayerTwo().getName()+" has won: "+ MainApplication.ticTacToePlay.getPlayerTwo().getWins()+ " games!");
    	numGamesPlayed.setText("The total number of games that have been played are: " +MainApplication.ticTacToePlay.getPlayerTwo().getNumberOfPlays());
    	
    	
    	
    }
    
    
    /**
     * setDraw displays a draw form.
     * 
     * @param isNetwork
     */
    public void setDraw(boolean isNetwork){
    	
    	playerWon.setText("The game has ended in a draw!");
    	player1Wins.setText(MainApplication.ticTacToePlay.getPlayerOne().getName()+" has won: "+ MainApplication.ticTacToePlay.getPlayerOne().getWins()+ " games!");
    	player2Wins.setText(MainApplication.ticTacToePlay.getPlayerTwo().getName()+" has won: "+ MainApplication.ticTacToePlay.getPlayerTwo().getWins()+ " games!");
    	numGamesPlayed.setText("The total number of games that have been played are: " +MainApplication.ticTacToePlay.getPlayerTwo().getNumberOfPlays());
    }
    
   
    /**
     * setNetPop displays a form that will show if it has been a draw, win, or loss during a network based game.
     * 
     * If the machine is a client machine, we do not allow the client to select the replay button and we wait for the host
     * to resume the game.
     * 
     * @param clientWon
     * @param isClient
     * @param isDraw
     */
    public void setNetPop(boolean clientWon, boolean isClient, boolean isDraw){
    	if(isDraw){
    		playerWon.setText("The game has ended in a draw!");
    		
    		if(isClient){
    			replayBtn.setVisible(false);
        		networkInfo.setVisible(true);
        		networkInfo.setText("Waiting for the host to resume the game!");
    		}else{
    			networkInfo.setVisible(true);
        		networkInfo.setText("Please select resume to resume the game!");
    		}
    		
    	}else{
    		if(isClient){
        		if(clientWon){
        			playerWon.setText("You have won the game!");
        		}else{
        			playerWon.setText("You have lost the game!");
        		}
        		replayBtn.setVisible(false);
        		networkInfo.setVisible(true);
        		networkInfo.setText("Waiting for the host to resume the game!");
        	}else{
        		networkInfo.setVisible(true);
        		networkInfo.setText("Please select resume to resume the game!");
        		if(clientWon){
        			playerWon.setText("You have lost the game!");
        		}else{
        			playerWon.setText("You have won the game!");
        		}
        		player1Wins.setText(MainApplication.ticTacToePlay.getPlayerOne().getName()+" has won: "+ MainApplication.ticTacToePlay.getPlayerOne().getWins() + " games!");
            	player2Wins.setText(MainApplication.ticTacToePlay.getPlayerTwo().getName()+" has won: "+ MainApplication.ticTacToePlay.getPlayerTwo().getWins() + " games!");
        		
        	}
    	}
    	
    	player1Wins.setText(MainApplication.ticTacToePlay.getPlayerOne().getName()+" has won: "+ MainApplication.ticTacToePlay.getPlayerOne().getWins() + " games!");
    	player2Wins.setText(MainApplication.ticTacToePlay.getPlayerTwo().getName()+" has won: "+ MainApplication.ticTacToePlay.getPlayerTwo().getWins() + " games!");
    	
    	numGamesPlayed.setText("The total number of games that have been played are: " +MainApplication.ticTacToePlay.getPlayerOne().getNumberOfPlays());
    }
    
   
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ResultWindow(null, (Boolean) null, null).setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton endGameBtn;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JLabel networkInfo;
    private javax.swing.JLabel numGamesPlayed;
    private javax.swing.JLabel player1Wins;
    private javax.swing.JLabel player2Wins;
    private javax.swing.JLabel playerWon;
    private javax.swing.JButton replayBtn;
    // End of variables declaration//GEN-END:variables
}
